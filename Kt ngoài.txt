# Hệ thống db OLTP và OLAP 
OLTP (On-line transactional processing) được dùng trong hầu hết các nghiệp vụ realtime ở dạng transaction. VD rút tiền từ tk ngân hàng
OLAP (On-line analytical processing) là phân tích trực tuyến, làm vc với lượng rất lớn data nên độ chính xác và toàn vẹn giao dịch k đươc như OLTP.
=> Phân biệt: OLTP phải ổn định và nhanh để phục vụ query data ngay lập tức, còn OLAP đủ lớn và mạnh về tính toán để phân tích dữ liệu kinh doanh lâu dài.

SQL thường dùng cho các hệ thống OLAP, query phức tạp với data lớn. Thường mở rộng chiều dọc, tăng CPU, RAM, HDD cho các node đã có, làm node đó mạnh lên nhiều lần. 
NoSQL dùng cho OLTP, k phù hợp với query phức tạp. Thường mở rộng chiều ngang như tăng số lượng node lên đông hơn trong cụm cluster.



# So sánh PostgreSQL, MySQL, SQL Server, Oracle Database
Excel là 1 chương trình quản lý dữ liệu mạnh, nhưng khi dữ liệu quá lớn, nó sẽ thua SQL cũng như các phương thức truy xuất, nhập, quản lý khác.
PostgreSQL tuân thủ nghiêm ngặt chuẩn SQL, PostgreSQL có nhiều tính năng cao cấp như kiểm soát đồng thời cao, hỗ trợ các kiểu dữ liệu phức tạp hơn.
MySQL linh hoạt hơn và có thể không đúng chuẩn, k hỗ trợ các tính năng nâng cao, do mã nguồn mở nên cộng động lớn và dễ dùng hơn.
SQL Server của Microsoft cũng mạnh như Postgre và phù hợp với các công cụ quản lý của Microsoft nhưng chi phí cao, không mạnh bằng PostSQL đâu, k có add if not exist.
Oracle Database của Oracle Corporation cũng rất mạnh, thương mại.
=> Tất cả đều chia cluster phân tán được 

-> SQL Server: Microsoft có nhiều dịch vụ đi kèm cho phép phân tích dữ liệu bằng SSAS(SQL Server Analysis Services) hay tạo được báo cáo bằng SSRS(SQL Server Reporting Services) hay thực hiện quá trình ETL(Extract-Transform-Load) bằng SSIS(SQL Server Integration Services), SQL Full Text Search.
ETL là quá trình tổng hợp data từ nhiều nguồn or chuyển dữ liệu từ hệ thống cũ sang kiểu db mới => chưa bao giờ được dùng
Thực tế SQL Server dùng T-SQL (Transact-SQL) là ngôn ngữ mở rộng của SQL cung thêm tính năng, chỉ hơi khác cú pháp 1 chút.

-> SQLite: Bản đơn giản của SQL server nhưng vẫn hỗ trợ đầy đủ tính năng nâng cao, ACID. K cần user password, k cần database server mà lưu luôn vào chỉ 1 file. Thg dùng trong các hệ thống vừa và nhỏ, ***không yêu cầu đồng bộ cao, k chia cluster.
SQLite sử dụng làm cache ok nhưng chậm hơn redis vì redis luôn lấy từ main mem là RAM trực tiếp



# ACID
Tx: 1 tx hoặc là thành công, hoặc là revert all, kbh thành công 1 phần. Mỗi lệnh SQL luôn là 1 tx độc lập.
Consistency: mọi tx sẽ đưa db từ một trạng thái hợp lệ này sang một trạng thái hợp lệ khác, kbh để lại 1 trạng thái không nhất quán
Isolation: các tx được thực hiện độc lập với nhau, có nhiều cấp độ cô lập đảm bảo các tx chạy đồng thời k ảnh hưởng lẫn nhau.
Durability: một tx đã được commit thì thay đổi phải được đồng bộ xuống db kể cả khi sự cố mất điện. Các tx thành công mà chưa dược đồng bộ xuống database phải được đồng bộ khi hệ thống hoạt động trở lại.



# Cơ chế database lưu trong storage
Data được lưu trên đĩa cứng or mainmem như bth. Data truyền giữa đĩa cứng và main mem theo từng unit of disk blocks.
Disk defragmentation trong máy tính nếu right click properties sẽ thấy ổ đĩa chia theo kiểu so le: xanh trắng xanh xanh xanh trắng xanh xanh xanh
=> VD các vùng màu xanh là ứng dụng chạy. Đáng lẽ nó phải kín xanh hết nhưng vẫn dôi ra các vùng màu trắng là do ứng dụng dùng xong thì bộ nhớ giảm đi làm dôi ra các phần thừa. Về sau các ứng dụng dùng thêm vùng nhớ thì append dùng tiếp vào các phần đằng sau vì các vùng trắng k đủ thành ra 1 ứng dụng nhưng lại lưu ở nhiều vùng nhớ rời rạc làm nó truy cập bị chậm. Các phần mêm disk optimization chính là cơ chế rearrange lại các vùng nhớ làm cho ứng dụng sau khi cài và sử dụng sẽ lưu về các vùng liên tiếp nhau trên disk.

-> Cơ chế: Khi ứng dụng chạy sẽ lưu theo các disk block, giả sử mỗi cục [] là 1 block, mỗi lần read write query DB sẽ access theo 1 lượng memory page, giả sử ở đây memory page cho query tới 2 block, ứng dụng ta chạy có màu đỏ:
[đỏ][trắng][trắng][đỏ][trắng][đỏ][trắng][trắng]...
[         ]       [         ][         ]
=> Do ứng dụng được lưu rời rạc trên đĩa làm nó tốn rất nhiều query để lấy được data. VD như trên thì các query bị thừa khi query cái trắng là vùng nhớ trống or vùng nhớ của 1 ứng dụng khác k cần thiết => ứng dụng disk optimization cơ chế sẽ đưa các vùng nhớ của cùng ứng dụng về sát lại nhau:
[đỏ][đỏ][đỏ][đỏ][trắng][trắng][trắng]...
[      ][      ]
=> read write I/O chơi đúng 2 memory page query là xong. 



# Cơ chế xử lý query
Query của user --Parser--> Relational Algebric(RA) --Optimizer--> Query execution plan. Optimizer dùng equivalence transformation chuyển sang code tương đương nhưng tốc độ nhanh hơn: Ưu tiên chạy select và projection trước, logic và join thực hiện sau cùng khi data đã được lọc nhỏ r.

-> Algebric expression:
Natural join là A |X| B. Innner join ký hiệu giống và có thêm điều kiện nhỏ ở bên dưới. VD: A |X|<a>10> B. INNER JOIN cũng gọi là theta join
VD1: SELECT * FROM R1 WHERE R1.A=X AND R1.C > Y => o<R1.A=X ^ R1.C>Y>(R1)
VD2: SELECT St.* FROM Student St, Subject S, Enrollment E WHERE St.StudenId = E.StudenId AND E.Sid = S.Sid AND Sname = 'Database' AND grade = 'A' 
C1: n<St.*>(o<sname='Database'^grade='A'>(St*E*S)) -> tức là natural join 3 cái r check điều kiện lồng dần dần
C2: n<St.*>(St*(o<grade='A'>E)*(o<sname='Database'>S))
=> Nhìn chung 2 cách tốc độ ngang nhau nhưng nếu kích thước của (o<grade='A'>E) nhỏ hơn đáng kể so với (E) thì cách 2 nhanh hơn cách 1.
VD3: R1 có n phần tử, R2 có m phần tử
R1 join R2 thì số lần duyệt = n + n x m tức duyệt R1 là n, duyệt R2 là n x m 
R2 join R1 thì duyệt R1 n x m, duyệt R2 là m tức m + n x m
=> Nếu n << m thì tốc độ join của TH1 nhanh hơn TH2 nhiều => optimizer cần chuyển đổi được như v
VD4: o<O1>(E1 x E2) = E1|X|<O1>(E2) thì cách 1 sẽ tạo cartesian product r dùng select cái thỏa mãn. Cách 2 thì lọc trước r mới lấy cartesian sẽ nhanh hơn
VD5: E1|X|(E2|X|E3) = (E1|X|E2)|X|E3 nếu E2|X|E3 << E1|X|E2 thì bên trái rẻ hơn
VD6: SELECT Name FROM BORROWER as B WHERE NOT EXIST ( SELECT * FROM BOOK_LOANS as BL WHERE B.CardNo=BL.CardNo) => quy về join để convert sang dạng số học
=> Project(name)(S(card_no)(b)-S(card_no(BL)) join B) 
VD7: select E.fname, E.lname, E.address from employee as E NATURAL JOIN works_on as W NATURAL JOIN project as P and PLocation = “Houston” and not exist (select*From Dept_Location Where DNumber = E.DNo and DLocation = “Houston”)
=> Project(E.fname, E.lname, E.address)(Project(DNO)(S(PLocation='Houston')(E |><| W |><| P)) - Project(DNO)(S(DLocation='Houston')(Dept_Location)) |><| (E|><|W|><|P))



# Other
-> Open Database Connectivity (ODBC) là 1 database driver trên window. Nó là 1 trình điều khiển giúp kết nối giữa ứng dụng client với cơ sở dữ liệu quan hệ trên server. 
Nó là ứng dụng phía client nên k đòi hỏi xử lý gì ở server. ODBC làm cho nguồn dữ liệu trở thành tổng quát đối với Client. Tức là ứng dụng Client không cần quan tâm kiểu cơ sở dữ liệu mà nó đang nối là gì, mọi loại kiểu cơ sở dữ liệu đều dùng ODBC đc. VD: có thể mở ODBC trong máy và cho kết nối với 1 data provider nào đó (như SQL Server).
Tên của nguồn CSDL ODBC để connect là DSN (kp DNS) có 3 loại: UserDSN (chỉ ng tạo ra dùng và chỉ trên máy đang dùng); SystemDSN (bất kỳ ai sử dụng máy này đều dùng đc, dùng khi cài đặt ứng dụng CSDL web hay các ứng dụng trên máy tính khác cần dùng CSDL); File DSN có thể đc copy và dùng bởi máy tính khác -> tạo nguồn ODBC trong control panel.
Có hai cách connect: 
- dùng string connection
- tạo trong control panel trong UserDSN nguồn open database connectivity kết nối đến cái SQL server sẵn r dùng cái tên dsn đó trên các ưng dụng cần kết noi là xong

-> Stored database -> internal schema (internal level) -> conceptual schema -> many external views for each end user
=> internal schema là file lưu key-val; conceptual level là các bảng và query, external view là view thấy data trong SQL



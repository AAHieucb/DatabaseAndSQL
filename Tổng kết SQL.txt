# Basic 
RDBMS chỉ hệ thống quản trị Relational DB. SSMS hay Azure Data Studio là một RDBMS.
SSMS quản lý qua UI phải connect vào db server lưu data là SQL Server. Có SQLCMD để dùng câu lệnh SQL trên terminal.



# Phân quyền user login
->*** Trước khi dùng dự án, phải có 1 account vào xem db (SSMS): 
- Dùng Window Authentication là login vào acc SA. SA k cần cấp quyền user cho database nào hết vì nó mặc định vào được tất cả
- Tạo account mới và cấp quyền user cho account đó vào 1 db bất kỳ để login vào
Security -> New Login -> Set default database và grant quyền access database engine -> RightClick database -> Security -> check SQL Server and Window Authentication mode -> Login SA vào 1 database -> New User -> chọn User là tk login vừa tạo -> cấp quyền gì cho nó với database này -> đăng nhập
Có thể add nhiều user truy cập vào database, nhưng 1 db chỉ có 1 db_owner duy nhất. 
=> Thường tạo user riêng cho server dùng, còn tk sa hoặc window authentication chỉ cho admin dùng để quản lý mọi thứ.
- Xoá 1 account phải xoá trong từng db. Nếu tk đó owned 1 schema của database thì thì phải đổi quyền đó sang cho người khác trước để nó k owned gì cả mới xoá được.

-> Phân quyền cho user dùng schema hay bảng cụ thể: 
Cả server có thể chung 1 login. 1 login có thể ánh xạ đến nhiều tên user khác nhau cho mỗi db.
Các ROLE: SELECT, INSERT, DELETE, UPDATE, REFERENCES (quyền refer to bảng đó khi dùng trong constraints), USAGE (quyền dùng element đó trong declaration của họ), TRIGGER(quyền được tạo trigger trên relation đó), EXECUTE(quyền thực hiện 1 phần code như function, procedure), UNDER (quyền tạo subtype của type cho trước).

GRANT SELECT ON Sales.Orders TO bob; 
SELECT * FROM sys.database_permissions WHERE major_id = OBJECT_ID('Sales.Orders'); => xem permission
DENY SELECT ON Sales.Orders TO bob; => chặn hẳn SELECT bất kể user có role
REVOKE SELECT ON Sales.Orders FROM bob; => thu hồi quyền đã gán, thu hồi cả deny

-> Nhanh:
Dùng SA tạo ra 1 login, từ login tạo ra 1 user mới cho 1 db. Phân quyền user đó cho schema hay bảng ok



# Data type
Dùng BIT cho boolean
Dùng uniqueidentifier cho GUID

DOUBLE dùng để lưu double, lưu sẽ tự làm tròn max khoảng 15 số sau dấu chấm.
DEC(p,[s]) dùng để lưu double với lượng chính xác số sau dấu chấm. Với s là số sau dấu phẩy, p là tổng các chữ số trước và sau dấy chấm. 

DECLARE @v1 Char(10) = 'Hello1'; -- k chứa Unicode, cấp phát tĩnh
DECLARE @v2 Nchar(10) = 'Hello2'; -- chứa Unicode, cấp phát tĩnh
DECLARE @v3 Varchar(10) = 'Hello3'; -- k chứa Unicode, cấp phát động max đến n ô nhớ
DECLARE @v4 Nvarchar(20) = N'Nguyễn Thụ Hiếu'; -- chứa Unicode, cấp phát động max n ô nhớ. Để nhập Unicode dùng cú pháp N'<chữ>'
Kiểu Text: k chứa Unicode, cấp phát động theo độ dài chuỗi nhập vào chứ kp bằng số như trên => thay thế bằng VARCHAR(MAX) lưu hàng tỉ tỉ ký tự được
Kiểu Ntext: chứa unicode, cấp phát động theo độ dài chuỗi nhập vào => thay thế bằng NVARCHAR(MAX)

SS với null ra UNKNOWN = 1/2 nằm giữa TRUE và FALSE. VD UNKNOWN AND TRUE = UNKNOWN

-> Có thể tạo custom type với CREATE TYPE 
SQL Server thì vào db -> Programmability -> Types -> User-Defined Data Types sẽ hiện các type ta định nghĩa

-> Cách clone type bảng 1 vào bảng 2 nhưng khởi tạo rỗng: SELECT * INTO CloneTable FROM sales.staffs WHERE 6>9

-> Nhanh:
uniqueidentifier và bit, nvarchar(max) lưu vô hạn với unicode
Có thể tạo type riêng với CREATE type
SELECT INTO rất mạnh trong việc tạo 1 bảng mới y hệt type bảng cũ và chứa các data chỉ định. Từ bảng tạm đó có thể thao tác thoải mái trước khi xoá đi.



# Các constraints
DEFAULT, NOT NULL, IDENTITY, constraint CHECK có thể theo hẳn 1 câu lệnh SQL mới.
UNIQUE INDEX là constraint unique và mặc định thêm non-clusted index cho trường. Nó khác primary index ở chỗ có thể có nhiều unique index và allow null.

-> Muốn thêm foreign key phải có primary key từ trước: FOREIGN KEY (id1) REFERENCES table2(id2) on UPDATE <action> ON DELETE <action>; 
- NO ACTION là <action> default sẽ trả lỗi và dữ liệu bảng cha được khôi phục nếu xoá mà vẫn còn ref
- CASCADE là bảng con cập nhật tương ứng bảng cha
- SET NULL thì bảng con luôn thành null và foreign key data type của con cũng phải cho phép null
- SET DEFAULT thì SQL Server sẽ về giá trị mặc định, trường này cũng phải có constraints default khi khởi tạo mới dùng được



# JOIN bảng
FULL OUTER JOIN, LEFT JOIN, RIGHT JOIN, INNER JOIN (mặc định JOIN), CROSS JOIN (Self Join) tích đề các, NATURAL JOIN tự động trường trùng tên
Các kiểu join k có sẵn:
- Semi join: chọn phần tử bảng A khớp với 1 or nhiều hàng bảng B nhưng k gồm các cột bảng B
SELECT A.* FROM A WHERE EXISTS ( SELECT 1 FROM B WHERE A.id = B.a_id )
- Anti join: ngược lại chọn các hàng bảng A mà k có hàng tương ứng trong bảng B
SELECT A.* FROM A WHERE NOT EXISTS ( SELECT 1 FROM B WHERE A.id = B.a_id );
- 2 table muốn UNION với nhau thì phải cùng số lượng cột và vị trí cột phải tương ứng nhau (k cần cùng tên) => thường SELECT gì đó từ 2 cái để cho cùng cột rồi mới union



# Xoá bảng
Thực tế nên hạn chế việc xóa data mà thêm 1 trường đánh dấu isDeleted thôi.
-> DELETE: xóa mọi record or vài record thỏa mãn điều kiện. Khi xóa cả bảng bị chậm hơn TRUNCATE khi SQL Server phải duyệt qua từng record. Có thể khôi phục lại bằng ROLLBACK command nếu xóa bằng transaction và chưa commit. IDENTITY vẫn tiếp tục tăng. DELETE sẽ lock row khi xóa từng dòng.
-> TRUNCATE: sẽ xóa file lịch sử transaction của bảng và giải phóng bộ nhớ của bảng luôn nên tốc độ nhanh hơn. Reset identity bảng về 0, dùng table lock, k thể ROLLBACK khôi phục
-> DROP: các cái trước chỉ xóa row thì cái này xóa cả cấu trúc bảng, muốn dùng bảng buộc phải CREATE TABLE lại. K thể khôi phục bằng ROLLBACK, xóa cả named element của schema.



# Backup database
Data file trong SQL gồm tệp chính (*.mdf) chứa dữ liệu khởi đầu, tệp thứ cấp (*.ndf) chứa dữ liệu phát sinh và nhật ký thao tác (*.ldf) dùng để khôi phục db khi sự cố

Backup FULL sẽ lưu 1 bản copy full db tại thời điểm đó vào 1 file
Backup WITH DIFFERENTIAL sẽ lưu backup khác gì so với lần full backup gần nhất. Phải đã từng backup full r.

- SSMS: Rightclick database -> tasks
- Backup bằng SQL tránh TH k có permission:
BACKUP DATABASE DBName TO DISK = 'C:\Backup\TenDatabase.bak' WITH FORMAT, INIT, NAME = 'Full Backup of DBName';
=> Nếu phiên bản k hỗ trợ phải tìm cách khác.



//!!!!!!
# View
View lưu câu lệnh SQL, có thể hạn chế người dùng truy cập vào DB mà phải thông qua view cho an toàn. Bản chất SQL cũng thế lệnh SQL vào Select * FROM <view> thôi
Update data trên view có ảnh hưởng tới bảng gốc nó ref tới => chỉ nên dùng để read
- Virtual view (mặc định): chỉ là query thuần, nó coi như chỉ lưu câu lệnh và phải exec lại
- Indexed view: là view mà có thể tạo chỉ mục, nó được lưu trữ riêng trong bộ nhớ như 1 bảng để truy vấn nhanh hơn. Quá trình ghi sẽ lâu hơn vì phải tự động cập nhật dữ liệu trên indexed view, nhưng khi đọc sẽ k cần execute lại query phức tạp nữa. 
- Marterizalized view: thực sự là bảng và được stored trong bộ nhớ vật lý. Nó khác indexed view ở chỗ không tự động cập nhật data mà ta phải tự làm, có 2 cách: periodic reconstruction là refresh định kỳ, hoặc viết trigger là thực hiện lệnh gì khi có điều kiện hành động gì xảy ra.
- Partitioned view: là view kết hợp data từ nhiều server khác nhau thành 1 table, nếu nó join member table trong cùng 1 instance SQL server thì gọi là local partitioned view
- System view: view có sẵn trong system, cung metadata cho db. VD: SELECT * FROM INFORMATION_SCHEMA.TABLES => xem các view của 1 database

-> Để tạo indexed view: tạo view bth với WITH SCHEMABINDING option, sẽ bind view vào schema của table gốc. Nếu đổi cấu trúc của table gốc thì phải drop indexed view trước r mới được -> CREATE UNIQUE CLUSTERED INDEX vào trường nào của view, tức là tạo view và đánh index cho view thôi. Tương tự có thể tạo nonclustered index cho view
SET STATISTICS IO ON sẽ giúp xem được chi tiết tốc độ câu query, mà chả cần vì trong SSMS có nút display estimated execution plan giúp xem hiệu suất. 



# Dùng bảng tạm
-> Temporary Table là table đặc biệt lưu tạm thời trên SQL Server, giúp sử dụng lại kết quả nhiều lần.
Local Temp Table chỉ tồn tại trong 1 phiên làm việc, còn Global Temp Table có thể sử dụng trên nhiều phiên làm việc. 1 phiên làm việc là ktg 1 lần ta kết nối vào CSDL.
Quy ước là temporary table tên phải bắt đầu bằng # với local, còn global là ##

Có thể tạo bằng SELECT INTO hoặc tạo như bảng bình thường với tên bắt đầu bằng #
Khi đã có temp table, vào System Database -> tempdb -> Temporary Tables sẽ hiện ra table này, đổi dữ liệu bảng gốc sẽ k ảnh hưởng đến bảng tạm.
Temporary table lưu trong bộ nhớ vật lý, có thể overhead bộ nhớ và CPU nên cần dùng khi thực sự cần.

-> WITH CTE: là lệnh lưu lại query phức tạp, chỉ tồn tại trong phạm vi 1 query và k thể truy cập bởi query khác. Mỗi lần gọi sẽ execute lại query đó, chỉ replace code vào thôi.

-> Biến table: ra khỏi phạm vi là 1 câu truy vấn, function hoặc procedure sẽ bị xóa. Không có query optimizer xử lý nên hiệu suất thấp, chỉ dùng với query nhỏ đơn giản.
Nó k mạnh như bảng tạm như k thể alter hay k thể đánh index, tốn ít bộ nhớ hơn. Còn bảng tạm thì dùng được như 1 bảng thật. Nó sống trong tempdb như bảng tạm chứ kp trong bộ nhớ
DECLARE <biến> TABLE(...)  hoặc  INSERT INTO <biến> SELECT ...



# Procedure Function Trigger Cursor
Function nhận @params cản SQL Injection, k thể thay đổi db.
Procedure có thể thao tác mọi thứ với db. Nó thg dùng để query r lấy output gửi cho 1 ứng dụng cụ thể, còn function thì như 1 query trả ra kết quả cho 1 query khác
Trigger giúp thực hiện actions khi sự kiện insert, delete xảy ra 
Cursor cực mạnh giúp duyệt từng dòng của tập hợp và thao tác gì trên đó.
=> Procedure có thể thay thế function và view

-> Khi chạy stored procedure lần đầu thì SQL Server chạy nó và lưu vào đệm gọi là plan cache, những lần tiếp theo sẽ dùng lại plan cache nên cho tốc độ tối ưu.
Vào SSMS của ta -> Programmability -> Stored Procedures sẽ ra các procedure ta tạo ra. Có thể update procedure bằng giao diện bằng cách rightclick procedure -> modify
Còn có system procedure có sp_ tiền tố để quản lý SQL server,
Các option:
- WITH RECOMPILE option sẽ khiến CREATE PROCEDURE được recompiled mọi lúc nó chạy, còn EXEC PROCEDURE sẽ compile procedure và lưu plan vào procedure buffer for later execution. Tức option này làm cho proc recompile every time chạy create và exec, mỗi lần chạy nó optimize plan để tăng tốc.
- WITH ENCRYPTION sẽ làm câu lệnh proc bị mã hóa và k thể xem nội dung query như nào

-> FUNCTION buộc có return giá trị. Vào DB -> Programmability -> Functions -> Scalar-valued Function -> xem list function
Mỗi khi create, có thể dùng CREATE OR ALTER để nếu tồn tại thì modify, k thì create. VD: CREATE OR ALTER FUNCTION udfSplit( @string VARCHAR(MAX) ) 
Các options return cho CREATE FUNCTION:
ENCRYPTION: The function's source code will not be stored as text in the system.
SCHEMABINDING: Ensures objects are not modified to affect the function.
RETURNS NULL ON NULL INPUT: The function will return NULL if any parameter is NULL.
CALL ON NULL INPUT: The function will execute even if the parameter is NULL.
EXECUTE AS clause: Defines the security context to execute the function.
VD: tạo function x với WITH SCHEMABINDING => tạo view y bên trong execute x => xóa function sẽ lỗi vì phải xóa view trước. WITH SCHEMABINDING làm cho nó dính chặt như v.

-> TRIGGER k được dùng với các hàm gây ảnh hưởng lớn tới dữ liệu như ALTER DATABASE, DISK RESIZE.
Vào database hiện tại -> Tables -> Chọn table có trigger -> Triggers sẽ hiện các trigger của table này
VD: Student(id, name, DoB, age, clazz_id) và Class(id, name, NumberOfStudent) 
=> Khi thêm 1 student của class nào vào Student thì tự update NumberOfStudent của Class có id đó. Phải dùng trigger.

CREATE [OR REPLACE] TRIGGER <trigger_name>
{BEFORE | AFTER | INSTEAD OF | FOR }
{INSERT | DELETE | UPDATE [OF <attribute_name>]}
ON <table_name nếu nh thì ngăn cách dấu phẩy>
REFERENCING {NEW | OLD} {ROW | TABLE} AS <name> => or use inserted, deleted cx đc
[FOR EACH ROW ]
[WHEN (<condition>) ]
BEGIN
 <trigger body goes here >
END;
=> Phần reference có 2 loại ROW | TABLE là vì TH ta INSERT INTO <table> SELECT <...> tức thêm hẳn 1 table vào 1 table khác thì chạy vào reference table
=> BEFORE trigger thg dùng khi cần check validation phức tạp. AFTER trigger thg dùng khi cần thay đổi 1 cái gì sau khi 1 cái gì đổi. INSTEAD OF đổi hẳn câu lệnh INSERT, DELETE or UPDATE trên 1 table or view, VD xóa 1 data trong bảng nhưng ta lại k xóa mà chỉ muốn update trường isDeleted của nó là true thì dùng INSTEAD OF

--> Trong SQL còn có 2 loại bảng ảo là INSERTED và DELETED. Mỗi khi dữ liệu được insert hay xóa thì data sẽ được lưu vào 2 bảng này. Còn UPDATE thực chất là xóa và add lại nên sẽ phát ra sự kiện update nhưng cả 2 bảng đều được lưu. Cụ thể bảng inserted sẽ lưu data mới của row vừa update và deleted lưu data cũ của row vừa update.

--> Có hẳn CREATE ASSERTION riêng rất mạnh để check điều kiện

VD dùng TRIGGER cho cả 2 operations INSERT và UPDATE thì dùng FOR INSERT, UPDATE cách nhau dấu phẩy ez. 
VD ta có thể check đk trigger kiểu: DECLARE @oldprice decimal(10,2), @newprice decimal(10,2); SELECT @oldprice = Price FROM deleted; IF(ISNULL(@oldprice, 0) = 0) => khi insert thì bảng deleted k có data sẽ chạy lệnh trong if



# Index
Giúp search nhanh hơn nhưng insert delete chậm hơn, tốn thêm bộ nhớ => K nên đánh index với bảng size nhỏ, hay được cập nhập dữ liệu thường xuyên.
VD 2 bảng join với nhau 1 trường thì đánh index trường đó ở 1 trong 2 bảng sẽ giúp query join nhanh hơn. 

-> PRIMARY KEY là clustered index. Nó sắp xếp lại dữ liệu gốc của bảng theo chỉ mục thành các khối chứa đúng data liền nhau trên bộ nhớ thì 1 page table truy cập được nhiều hơn
NON_CLUSTERED thì bản chất nó tạo 1 node mới trên cây trỏ tới address thực tế, nhưng k sắp xếp lại disk nên hiện tương data so le có thể làm page table k query tối ưu.

Primary key là clustered index duy nhất vì nó đổi thứ tự lưu data trên data gốc. Chạy lệnh CREATE INDEX trên 2 cột khác nhau thì 2 cột đó mặc định dùng non-clustered index, chúng lưu chỉ mục ở 1 nơi riêng (BTree) và ta phải truy vấn đến đó trước để lấy địa chỉ rồi mới truy cập vào data
=> Đánh index làm tốc độ update data chậm đi, non-clustered index còn tốn thêm không gian lưu trữ. Do đó k nên đánh chỉ mục khi bảng có kích thước nhỏ, hay được cập nhập dữ liệu thường xuyên hoặc các cột có nhiều giá trị NULL

-> Multicolumns index và multiple indexes. VD: age, name, id ta đánh 3 non clustered index độc lập hay đánh 1 index cho cả 3 trường
Nếu mỗi trường 1 index, có thể search tốc độ nhanh theo từng trường. Nếu search theo cả 3 trường thì chỉ search nhanh được 1 trường đầu tiên trong đó thôi.
Nếu đánh multicolumn index cho cả (age, name, id) thì tốc độ search (age) or (age, name) or (age, name, id) cho tốc độ nhanh hơn bth. Nhưng nếu chỉ search trường age cho tốc độ k nhanh bằng đánh chỉ 1 index cho age. Còn nếu search theo id or name riêng sẽ k dùng index nên chậm.

-> Data structure lưu index: dùng hash, BTree
Khi đánh chỉ mục, ta cứ hiểu là có thể refer đến các mục trong memory trực tiếp mà k cần duyệt lần lượt trên disk.
Có TH data đánh so le làm tốc độ k đổi, VD đánh index trường gender: FMFMFMF mà mỗi mem page có 2 block, mỗi block 1 data thì đánh chỉ mục index tốc độ y hệt như duyệt tuần tự

--> Xét non-clustered index: kết hợp 2 cấu trúc doubly linked list và cây tìm kiếm. 
- Doubly linkedlist giúp tốc độ update nhanh hơn: 1 node trong list chứa 1 or 1 nhóm các index. Đơn vị nhỏ nhất db lưu là 1 page or 1 block với dung lượng lớn hơn dung lượng của 1 row index, db lưu index vào các khoảng trống đó để tránh lãng phí. Như v khi thêm hay update index, ta có thể phải dịch phần tử ở 1 vài node mới xếp vào được:
Node1[e1,e2,e3] - Node2[e4,,e5] - ...  ->  Node1[e1,e6,e2] - Node2[e3,e4,e5] - ...
Chèn e6 vào giữa e1 và e2 phải sửa 2 node, dùng doubly linked list sẽ nhanh hơn array phải dịch hết.
Index node chứa địa chỉ để rồi query vào bộ nhớ theo địa chỉ đó lấy data. Địa chỉ data chỉ ref tới nhau qua linked list, thực tế nó lưu ở nhiều nơi trong bộ nhớ vật lý.

- Cây tìm kiếm B-Tree: gọi là balance tree có kc từ rootnode tới mọi leafnode là như nhau, tiện cho range query. 
Các leaf node chỉ được nối ref địa chỉ với nhau bằng doubly linked list để update nhanh. Các leaf nodes cũng nằm trong 1 BTree, node cha lưu index lớn nhất của node con. 
                          __________[24 83]___________________  _____ ....        (Rootnode)
                         /                                    \                       
         ____[12 17 21 24]__________             ___[46 53 57 83]____________     (Branchnode)
        /        |         \        \           /         |         \        \  
[10 11 12][14 16 17][18 20 21][22 23 24][40 43 46][46 53 53][55 57 57][67 83 83]  (Leafnode)
VD cần tìm node 20, nó sẽ tìm từ root node vị trí >=20 là 24 sang branch node [12 17 21 24], sang tiếp leafnode [18, 20, 21] và tìm tuần tự lớn tới nhỏ 21 -> 20 là index cần tìm
Duyệt cây tìm leafnode nhanh nhưng duyệt từng leaf node lấy data thực có thể bị lâu vì phải duyệt tuần tự r từng block mà các leaf node có thể k cùng 1 block

=> Tốc độ tìm nhanh và nếu tăng số lượng bản ghi tới vài triệu, độ sâu của cây vẫn rất nhỏ. VD 1 node có 100 index và tăng 1 level, lượng index có thể lưu sẽ tăng cả trăm lần

-> 4 kiểu lấy data từ DB:
- Index unique scan (index seek): Đánh index cho các cột mà tổ hợp có giá trị unique k trùng nhau và search trên đó với condition cho output là 1 row duy nhất. Ta chỉ cần duyệt cây tìm ra đúng 1 node r lấy data từ 1 block duy nhất. Tốc độ luôn là nhanh nhất có thể.
Khi đánh index cho 1 cột không là primary key thì trong tree node vẫn lưu cả primary key để tiện tham chiếu về sau.

- Index range scan: Duyệt cây rồi duyệt theo leaf node tìm tất cả nhiều bản ghi thỏa mãn. BTree có range query nhanh

- Table access by index rowid: Db dùng khi lấy data từ cột k được đánh index. Khi duyệt index thì có luôn data từ các cột được đánh index rồi vì có ngay trên BTree. Nhưng nếu cần lấy data từ các cột ko được đánh index, nó phải lấy tiếp rowid ra search trong bộ nhớ vật lý. Bước này tùy vào row id có index hay không mà duyệt tiếp nhanh hay chậm.
VD: Đầu tiên duyệt bằng index range scan ra các row, sau đó cần lấy data từ 1 trường k được đánh index của row, nó sẽ lấy id của từng row và áp dụng tiếp table access by index rowid lấy ra data trường đó => Tức khi SELECT các trường k được đánh index cũng làm query lâu hơn 1 tẹo

- TABLE ACCESS FULL: là duyệt full bảng tuần tự để tìm data cần lấy. Độ phức tạp tuyến tính với kích thước bảng. Xảy ra khi có trường trong lệnh WHERE k đánh index. 
Đa phần kiểu duyệt này là chậm nhưng có TH nó chạy nhanh hơn index. VD ta cần lấy gần hết các row trong bảng với 1 điều kiện nào đó: 
Nếu dùng index sẽ tốn thời gian tìm index với index range scan rồi đọc từng block trong bảng để lấy từng row với table access by index rowid
Nếu dùng table access full thì nó biết là phải check cả bảng nên sẽ đọc nhiều block cùng 1 lúc và thao tác đọc ít hơn.
=> VD cần đọc 90% 1 cuốn sách thì việc đọc liên tiếp từng cục 10 trang sẽ nhanh hơn tra mục lục trang 1, đọc trang 1, lại tra mục lục trang 2, đọc trang 2 cho đến hết quyển

-> Các loại index khác:
- Merge index: 1 loại chỉ mục tối ưu truy vấn bằng cách kết hợp nhiều chỉ mục của DB ban đầu tạo ra 1 chỉ mục mới chuyên dùng cho truy vấn kết hợp 2 hay nhiều bảng, nhiều cột

- Bitmap index: loại chỉ mục trong DB khi tìm kiếm các giá trị không liên tục hoặc trường có số lượng giá trị duy nhất nhỏ. Tốc độ update chậm hơn các loại index khác.
Số lượng bitmap index bằng số lượng giá trị unique. VD có thể đánh index cho trường gender khi có 1 triệu bản ghi cũng ok vì chỉ có 2 giá trị duy nhất. VD 1 bảng 5 row với trường color có 3 giá trị duy nhất theo thứ tự là: RGGGB. Đánh bitmap index cho cột color sinh ra 3 bitmap index là: Red: 10000; Green: 01110; Blue: 00001
=> VD search theo color green thì nhìn vào bitmap index của color là thấy ngay row 2,3,4 có color Green. Nó dùng các phép logic để so sánh và khi update

-> Đánh index trường text và search trường đó thì chỉ có tác dụng với 'pattern%', còn '%pattern%' sẽ k dùng index. Để tốc độ cao phải CREATE FULLTEXT CATALOG để tạo full text search index riêng trong SQL Server.

--> Bài toán search 2 trường chứa <search_text> ở bất cứ vị trí nào
- Full text index có cơ chế tokenize, chỉ được khi search_text là 1 token chứ chứa tùy ý 1 phần của từ khác sẽ k thể search, k hoàn toàn fuzzy. Full text index phải dùng CONTAIN không dùng được LIKE trong SQL Server.
K cần phải gom các cột lại thành 1 cột mới, mà chỉ cần đánh 1 index trên nhiều cột được luôn. Bộ nhớ tăng k đáng kể và tốc độ k đổi.
- Nếu biết trước các từ có thể search thì dùng computed column với CHARINDEX kiểu thêm 1 column lưu lại tần suất xuất hiện của 1 từ:
ALTER TABLE MyTable
ADD HasABC AS CASE WHEN CHARINDEX('abc', MyColumn) > 0 THEN 1 ELSE 0 END PERSISTED;
Hoặc dùng các kiểu computed column khác là tạo ra cột mới chứa đặc điểm liên quan đến phần text cần search.
- Dùng Gin với pg_trgm là kiểu đặc biệt chỉ có trên PostgreSQL
- Nếu search kiểu startsWith <search_text> thì dùng index bth cũng tự hỗ trợ.
- Buộc phải dùng LIKE vì SQL k có cách nào khác. 
Nếu cần search nhiều trường (>2) thì nên tạo 1 cột concat các cột khác vào và LIKE 1 lần trên cột đó thay vì LIKE OR nhiều lần

-> Khi 1 bảng k đánh index, mặc định nó là heap table với data xếp lộn xộn và luôn tìm tuần tự. Heap table trong sql chỉ tồn tại khi table không được đánh index
Khi đánh cluster index thì heap table thành clusterd index table
Non clustered index tạo ra 1 cấu trúc riêng biệt ref tới dữ liệu gốc và klq đến dữ liệu gốc.
Chú ý index scan là duyệt qua mọi toàn bộ chỉ mục để tìm kiếm dữ liệu (theo key), table scan là duyệt toàn bảng (theo rowid = số trang, file, row)

VD nếu bảng đánh non-clustered index, select where dùng index nhưng cần lấy các trường ngoài index:
- Nếu bảng k đánh clustered index, nó dùng table scan theo rowid tìm tiếp để lấy đủ trường vì con trỏ của non-clustered index trỏ tới rowid.
- Nếu bảng đánh clustered index, non clustered index sẽ ref tới key rowid luôn và dùng index scan tìm lấy các trường còn lại. Tức con trỏ của non-clustered index trỏ tới Clustered Index Key.
=> Thành ra nếu đánh non-clustered index mà k có clustered index, xong lấy nhiều trường ngoài non-clustered index, nó vừa tìm trong non-clustered index tree, vừa dùng table scan thì thậm chí lâu hơn duyệt table scan luôn. Do đó nên đánh thêm 1 clustered index hoặc dùng INCLUDE trong non-clustered index để thêm các cột thường xuyên truy xuất

-> Trong SSMS có button để check query plan => Kết quả đọc từ phải sang trái. Bôi đậm 2 query khi check sẽ hiện cost ss 2 queries
Đánh clusterted index thì tree chứa mọi trường. Còn tree của non-clustered index trường displayname chỉ chứa id và displayname thôi.
Nên nếu search displayname và SELECT Id sẽ thấy query plan là non-clustered index scan, SELECT * thì là clustered index scan vì nó lấy luôn từ đó thay vì search trên non-clustered tree rồi search tiếp clustered tree.
Lưu ý LIKE %% kbh dùng index nhưng hiện như vậy là bảo đang search trên tree nào chứ kp kiểu search, nó vẫn sẽ search full table thôi.

-> Tên cột có space có thể nhét trong '' -> VD: SELECT @count AS 'Count number'; 
LIKE: "_r%" chứa r ở vị trí thứ 2. h[oa]t tìm hot, hat; h[^oa]t tìm hit và né hot hat ra tức ^ là phủ định trong []; c[a-c]t tìm tất cả cat, cbt, cct tức - là trong 1 khoảng 




# Viết SQL tránh index chậm
Có nhiều lệnh tưởng là dùng index nhưng khi chạy lại k, phải check bằng statistic của SQL mới biết được

-> Các câu lệnh tìm 1 giá trị mà khác giá trị nào trong DB cần chú ý vì nhiều lúc nó k dùng index sẽ bị lâu.
VD nếu cần tìm người có ngày sinh khác 1/4/2000. Nếu đánh index cho ngày sinh bằng BTree thì có thể query kiểu tìm người có ngày sinh > 1/4/2000 hoặc < 1/4/2000 (vì BTree rất mạnh với range query) thay vì != 1/4/2000 => tuỳ case nào dùng index hay không. Nhiều DB cố không dùng index mà duyệt tuần tự hoặc lấy list các giá trị =1/4/2000 và trừ đi nó

-> Index chậm do dùng hàm
Vd đánh index last_name mà tìm kiếm case insensitive: SELECT first_name, last_name FROM employees WHERE UPPER(last_name) = UPPER('winand') => Sẽ dùng TABLE ACCESS FULL. 
Để tránh điều này, phải xác định database tìm kiếm theo kiểu nào từ trước và đánh function-based index (FBI). Vd: CREATE INDEX emp_up_name ON employees (UPPER(last_name))
=> Như v sẽ dùng INDEX RANGE SCAN rồi đến TABLE ACCESS BY INDEX ROWID

Compiler có thể tính trước giá trị bên phải vì nó fix cứng là 'WINAND' tại compile time, rồi perform xử lý thực với: SELECT WHERE UPPER(last_name) = 'WINAND'
Dùng ORM cần chú ý đôi khi nó tự thêm lower upper mà dev kb. ORM (Object-Relational Mapping) là kỹ thuật ánh xạ data từ db sang object trong ngôn ngữ lập trình đang dùng.

--> MySQL và SQL k hỗ trợ trực tiếp FBI thì giải pháp là dùng 1 cột mới, VD 1 cột riêng lưu thêm UPPER(last_name) và đánh index cột đó là có tốc độ cao ngay. 
VD trong SQL, khi dùng như v phải dùng cột mới sinh ra với từ khóa PERSISTED. PERSISTED báo 1 cột sau khi được tính toán lưu vào bảng thì SQL sẽ tự động update giá trị cột đó khi các data các cột liên quan thay đổi. Mặc định là non-persisted.

--> Các function mà mỗi lần query dù data trong db k đổi nhưng kết quả vẫn ra khác nhau thì k có tác dụng. 
VD function lấy tuổi bằng ngày sinh trừ SYSDATE thì SYSDATE đổi liên tục nên kết quả lấy mỗi lần là khác nhau thì index k có tác dụng, index sẽ luôn cố định như thời điểm tạo. VD tương tự khi function dùng hàm lấy số RANDOM
=> Do đó db yêu cầu các function đánh index phải đi kèm 1 từ khóa như DETERMINISTIC(Oracle) or IMMUTABLE(PostgreSQL) để báo function k tự thay đổi giá trị theo thời gian.

-> Query theo range kết hợp. 
VD: SELECT first_name, last_name, date_of_birth FROM employees
WHERE date_of_birth >= TO_DATE(?, 'YYYY-MM-DD') AND date_of_birth <= TO_DATE(?, 'YYYY-MM-DD')
  AND subsidiary_id  = ?
=> Đánh index vẫn có được với query theo range như BETWEEN, >=, <=. Ở đây nếu đánh index 1 cặp (date_of_birth, subsidiary_id) thì search date_of_birth rất nhanh tìm được các block nhiều node lá, r chạy tuần tự từng node lá để tìm subsidiary_id. Nhưng nếu đánh index (subsidiary_id, date_of_birth) thì tìm 1 node lá ra luôn cho tốc độ nhanh nhất.

- Rule of thumb1: Khi đánh index cho nh phần tử, luôn đánh cho trường được truy vấn với số lượng ít hơn ở bên trái, thường không là query range.
- Ngoài ra họ còn ưu tiên những cột có độ selective lớn ở bên trái. Tức là ở trên họ thường query theo subsidiary_id hay theo date_of_birth nhiều hơn thì đánh index theo nó. VD nếu nhiều lúc họ toàn query theo 1 trường date_of_birth thì nên đánh index theo nó bên trái hoặc đánh thêm 1 index riêng cho date_of_birth

-> Truy vấn CONTAINS cột string k dùng được wildcard, k dùng index. Nếu đánh FULL TEXT SEARCH INDEX thì sẽ dùng.
Truy vấn với LIKE dùng được wildcard và index thường nhưng k dùng full text search index. Index chỉ có hiệu quả cho phần text ở trước ký tự wildcard đầu tiên. 
Vd search LIKE "WIN%D" thì sẽ dùng index range scan tìm row có cột index bắt đầu bằng "WIN", r dùng table access by index rowid để tìm "WIN%D"
=> Nếu cần search text bắt đầu bằng wildcard nhanh thì k làm được mà phải đổi qua elastic search.

-> Partial indexes
VD1 trong hệ thống queue mà ta muốn lấy từ database các message chưa qua xử lý cho 1 người nhận cụ thể: SELECT message FROM messages WHERE processed = 'N' AND receiver = ?
=> Với rule of thumb, ta biết nên đánh index (processed, receiver) vì processed có selective cao hơn, nhưng lại bao gồm các row mà ít được query đến, vì ta chỉ có nhu cầu query nhanh với processed='N'
=> Để k tốn thêm bộ nhớ cho những bản ghi này, ta có thể dùng: CREATE INDEX messages_todo ON messages (receiver) WHERE processed = 'N'  thì chỉ những row thỏa mãn đk WHERE mới được index và tìm nhanh. ĐK WHERE phải là deterministic (cùng đầu vào luôn cho cùng 1 đầu ra, VD k được chứa GetDate())

VD2 nếu trong 1 table mà ta query rất nhiều câu lệnh sau: SELECT message FROM messages WHERE processed = 'N'
=> Giả sử messages là tin nhắn rất lớn. Best case về tốc độ là đánh index (processed, message) => dữ liệu sẽ chỉ cần lấy trên index BTree mà k cần vào bảng, tức chỉ cần mỗi index range scan. Tuy nhiên điều này chỉ ok khi số lượng row có processed='N' ít vì lưu cả message lên thẳng BTree sẽ tốn tài nguyên. 

--> VD giả lập partial index:
VD ta cần đánh index trường receiver chỉ khi trường processed = 'N'. Vói database bth thì dùng luôn: CREATE INDEX testindex ON messages (receiver) WHERE processed = 'N'
Nhưng opracle k hỗ trợ partial index, ta có thể giả lập partial index bằng cách viết 1 function return NULL với các giá trị không muốn đánh index, return giá trị bth vói các giá trị muốn đánh index là xong. 
Tạo function giá trị processed = 'N' muốn đánh index, != 'N' thì return NULL thì Oracle sẽ bỏ qua, k đánh index:
CREATE OR REPLACE
FUNCTION pi_processed(processed CHAR, receiver NUMBER)
RETURN NUMBER
DETERMINISTIC
AS BEGIN
  IF processed IN ('N') THEN
    RETURN receiver;
  ELSE
    RETURN NULL;
  END IF;
END
Rồi tạo index:
CREATE INDEX messages_todo ON messages (pi_processed(processed, receiver))

-> Ta có thể đánh index cho trường cực lớn bằng cách:
- Đánh index 1 phần của trường. VD: CREATE INDEX idx_partial_message ON messages ((left(message, 100))); => Đánh 100 ký tự đầu trong PostgreSQL. SQL Server k hỗ trợ thì có thể tạo 1 trường mới lưu 100 ký tự đầu.
- Nén data trước
- Full-Text Indexing tìm nhanh, tốn mem
- Thay vì đánh index cho mọi message, ta đánh index cho các message gần đây or message thường truy cập thôi

-> Dùng index kp lúc nào cũng nhanh nhất. Thực tế, query optimizer chuyển SQL thành execution plan dựa vào nhiều thông số như statistics của database để tìm plan tối ưu nhất
Ta có thể custom: 
- Vd query ép k dùng index trong SQL, optimizer sẽ hiểu là chạy table access full: SELECT column1, column2 FROM table_name WITH (INDEX(0)) WHERE some_condition;
- VD ép dùng 1 index cụ thể: SELECT * FROM [WideWorldImporters] WITH (INDEX ([FK_Sales_Invoices_AccountsPersonID])) WHERE CustomerID = 191

VD TH lỗi statistical index của oracle db: index range scan duyệt 40 rows, nhưng TABLE ACCESS BY INDEX ROWID sau đó lại duyệt 100 rows.
Xét TH oracle statistics dùng FBI: nó duy trì thông tin về các giá trị distinct của các cột trong bảng cho mục đích thống kê. Khi 1 index FBI mới sinh ra, nó sẽ không update table statistics 1 cách tự động gây sai như v => Khi dùng oracle database SQL, nếu đổi index thì phải update statistics của table, thì số row ở đây mới về 1 là đúng.

-> Query với tham số: 
Khi 1 query mới xh, trình tối ưu sẽ phân tích lấy ra execution plan tốt nhất rồi mới thực hiện. SQLServer và Oracle có thể sử dụng lại execution plan nhiều lần với câu lệnh giống nhau giúp tiết kiệm chi phí xây 1 execution plan mới. Nó áp dụng khi câu lệnh giống hệt nhau chỉ khác 1 vài tham số => Do đó dùng tham số giúp tái sử dụng exection plan 

Dùng tham số giúp tái sử dụng execution plan nhưng có thể làm chậm query khi tham số đó ảnh hưởng tới số lượng dữ liệu.
VD: Query tham số A có cost là 100 và tìm được 100 bản ghi với execution plan là tính theo index. Query với tham số B có cost là 1000 và tìm được 1000 bản ghi với cùng execution plan đó. Trong TH B, dùng fulltable scan cho tốc độ nhanh hơn vì duyệt gần hết bảng nhưng do query theo tham số nên nó tái sử dụng execution plan cũ nên bị chậm.
Còn nếu k dùng tham số, db sẽ dựa vào 1 cái histogram lưu tần suất data các cột trong bảng. Nó thấy tần suất khác nhau nên cost khác nhau, trình tối ưu sẽ tự tìm phương án tốt nhất là fulltable scan cho THB.
Bản chất là vì khi dùng tham số thì trình biên dịch và trình tối ưu kb giá trị runtime của tham số. Nó tính lần đầu rồi lưu vào cache và dùng hết cho các lần sau khi thấy cùng query. Còn dùng câu lệnh bth thì nó biên dịch và xây execution plan mới mỗi khi chạy 
=> Lệnh càng phức tạp, càng cần cache nhiều. SQL Server và Oracle có cơ chế để tự biến cấu truy vấn thành dạng truyền tham số. Tính năng này được gọi là CURSOR_SHARING (Oracle) hoặc forced parameterization (SQL Server).
=> Người ta khuyên là để tối ưu tốc độ, ta luôn dùng tham số khi thấy data trả ra trong các TH không chênh lệch nhiều (hay ko ảnh hưởng tới execution plan). Phần này khá thừa vì ta luôn dùng tham số hóa để tránh SQL Injection


-> Các loại key
Super key: là set attributes unique trong relation
Candidate key(Minimal key): là super key nhưng k bị redundant là k thể reduce các trường đi mà vẫn giữ nguyên thuộc tính unique được nx. 
Primary key: là 1 candidate key nếu ta k xác định thì DBMS tự xác định cho ta. 
Alternate key: là candidate key nhưng k được chọn là primary key
Unique key



# Other
-> Trong database bth thì cái gì đi với NULL cũng là NULL, nhưng Oracle database lại coi empty string là NULL. 
VD dùng toán tử X || NULL sẽ ra X trong Oracle DB, còn các DB khác ra NULL.
Trong Oracle database, khi đánh index 1 cột thì các giá trị NULL của cột đó sẽ k có trong index, nếu search data trường đó có giá trị null sẽ full scan. Tức là: CREATE INDEX x ON A  <=>  CREATE INDEX x ON A WHERE A IS NOT NULL

Để xử lý case này ta có thể đánh index 2 trường (date_of_birth, X) với trường X là 1 trường NOT NULL bất kỳ. Thì mọi bản ghi date_of_birth có NULL vẫn được đánh index và hỗ trợ truy vấn trên. NN vì nó k bỏ qua giá trị NULL, phải đánh index mọi giá trị của date_of_birth mới đánh được index cho X nữa trên cây 
Cách khác là đánh index kèm 1 constant expression k thể NULL như này: (date_of_birth, '1')

Nếu dùng kèm 1 user-defined function thay vì constant expression, Oracle database k có cách nào biết được liệu function đó có null hay không nên sẽ full scan table để k bỏ sót bản ghi nào. Ta có thể tự ý thêm IS NOT NULL cho function đó thì Oracle tối ưu sẽ tự hiểu là các data cần tìm chỉ nằm trong index nên sẽ dùng index. VD: 
SELECT * FROM employees WHERE date_of_birth IS NULL AND blackbox(employee_id) IS NOT NULL
Với blackbox là user-defined function chả cần biết có NULL hay không nhưng Oracle sẽ dùng index của date_of_birth để search vì ta có IS NOT NULL. Hàm blackbox luôn trả TRUE nên k ảnh hưởng tới query.


Xem thông tin của trigger, function, view, procedure trong SQL server với: EXEC sp_helptext '<Tên>';



